import Pkg
Pkg.activate("C:/Users/93dav/programacao_nao_linear")

import Pkg; Pkg.add("Optim")
import Pkg; Pkg.add("CUTEst")
import Pkg; Pkg.add("NLPModels")
import Pkg; Pkg.add("LinearAlgebra")

using Optim, CUTEst, NLPModels, LinearAlgebra

# Carregar um problema de teste CUTEst
nlp = CUTEstModel("BA-L1SPLS"; decode=true)

# Definir a função objetivo e gradiente para o problema
f_obj = x -> obj(nlp, x)
grad_obj = x -> grad(nlp, x)

# Ponto inicial 
x = nlp.meta.x0
i=0

while (norm(grad_obj(x)) > 0.001)
    
    d=-grad_obj(x)
    α=0.1
    c=0.5

    while (f_obj(x+α*d) > f_obj(x)-c*α*d'*d)
        α = α*c
    end

    x=x+α*d

    i=i+1
    println("--------- Iteração: ",i," ---------")
    #println("Ponto: x = ",x)
    println("Valor funcional no ponto: f(x) = ",f_obj(x))
    println("Norma do gradiente: ", norm(grad_obj(x)))


end

println("Número de iterações: ",i)
println("Ponto final: x = ",x)
println("Valor funcional no ponto: f(x) = ",f_obj(x))

finalize(nlp)