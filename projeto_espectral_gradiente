import Pkg
Pkg.activate("C:/Users/93dav/programacao_nao_linear")

import Pkg; Pkg.add("Optim")
import Pkg; Pkg.add("CUTEst")
import Pkg; Pkg.add("NLPModels")
import Pkg; Pkg.add("LinearAlgebra")
import Pkg; Pkg.add("DataFrames")

using Optim, CUTEst, NLPModels, LinearAlgebra, DataFrames

# Métricas de desempenho
mutable struct metricas
    function_count::Int
    gradient_count::Int
end

#================================================================================================================
# Função
- `add_result!(df, problem, f_cauchy, grad_cauchy, f_bfgs, grad_bfgs, f_spectral, grad_spectral)`

# Objetivo
- Adicionar resultado em um df já criado.

# Saída
- Ele modifica o df e não retorna nada.

# Entradas
- `df`              : DataFrame que será modificado. No formato:
                    df = DataFrame(Problem = String[], f_Cauchy = Float64[], grad_Cauchy = Float64[],
                    f_BFGS = Float64[], grad_BFGS = Float64[], f_Spectral = Float64[], grad_Spectral = Float64[])

- `problem`         : nome do problema, sugestão enviar nlp.meta.name
- `f_cauchy`        : contagem de avaliações da função no método de Cauchy.
- `f_bfgs`          : contagem de avaliações da função no método de BFGS.
- `f_spectral`      : contagem de avaliações da função no método Espectral.
- `grad_cauchy`     : contagem de avaliações do gradiente no método de Cauchy.
- `grad_bfgs`       : contagem de avaliações do gradiente no método BFGS.
- `grad_spectral`   : contagem de avaliações do gradiente no método Espectral.
=================================================================================================================#

function add_result!(df, problem, f_cauchy, grad_cauchy, f_bfgs, grad_bfgs, f_spectral, grad_spectral)
    push!(df, (
        Problem = problem,
        f_Cauchy = f_cauchy, grad_Cauchy = grad_cauchy,
        f_BFGS = f_bfgs, grad_BFGS = grad_bfgs,
        f_Spectral = f_spectral, grad_Spectral = grad_spectral
    ))
end

#================================================================================================================
# Função
- `add_result!(df, problem, f_cauchy, grad_cauchy, f_bfgs, grad_bfgs, f_spectral, grad_spectral)`

# Objetivo
- Adicionar resultado em um df já criado.

# Saída
- Ele modifica o df e não retorna nada.

# Entradas
- `df`              : DataFrame que será modificado. No formato:
                    df = DataFrame(Problem = String[], f_Cauchy = Float64[], grad_Cauchy = Float64[],
                    f_BFGS = Float64[], grad_BFGS = Float64[], f_Spectral = Float64[], grad_Spectral = Float64[])

- `problem`         : nome do problema, sugestão enviar nlp.meta.name
- `f_cauchy`        : contagem de avaliações da função no método de Cauchy.
- `f_bfgs`          : contagem de avaliações da função no método de BFGS.
- `f_spectral`      : contagem de avaliações da função no método Espectral.
- `grad_cauchy`     : contagem de avaliações do gradiente no método de Cauchy.
- `grad_bfgs`       : contagem de avaliações do gradiente no método BFGS.
- `grad_spectral`   : contagem de avaliações do gradiente no método Espectral.
=================================================================================================================#

function Cauchy(nlp, x, d, passo_inicial, fator_reducao, cont, criterio_parada)
    i=0
    while (norm(d) > criterio_parada)
    
        d=-grad(nlp, x)
        cont.gradient_count += 1
        α= passo_inicial
        c= fator_reducao
    
        while (obj(nlp, x+α*d) > obj(nlp, x)-c*α*d'*d)
            cont.function_count += 2
            α = α*c
        end
    
        x=x+α*d
    
        i=i+1
        println("--------- Iteração: ",i," ---------")
        println("f(x) = ",obj(nlp, x))
        println("|grad_f(x)| = ", norm(d))
    
    end
end


# Carregar um problema de teste CUTEst
nlp = CUTEstModel("HILBERTB"; decode=true)

cont = metricas(0,0)

Cauchy(nlp, nlp.meta.x0, -grad(nlp,x), 0.1, 0.5, cont, 0.0001)




# Registrar resultados
results_df = DataFrame(
    Problem = String[], 
    f_Cauchy = Float64[], grad_Cauchy = Float64[],
    f_BFGS = Float64[], grad_BFGS = Float64[],
    f_Spectral = Float64[], grad_Spectral = Float64[]
)


add_result!(results_df, nlp.meta.name, cont.function_count, cont.gradient_count, 0, 0, 0, 0)


println(results_df)

#using CSV
#CSV.write("results.csv", results_df)


finalize(nlp)